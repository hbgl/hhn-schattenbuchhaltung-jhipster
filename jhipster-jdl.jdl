@skipClient
@search(elasticsearch)
entity LedgerEntry {
    no String required
	description String required
    aNo String
    bookingDate Instant required
    income BigDecimal required
    expenditure BigDecimal required
    liability BigDecimal required
}

relationship OneToMany {
	LedgerEntry{comments} to Comment{ledgerEntry}
}

relationship ManyToMany {
	LedgerEntry{tags} to Tag{ledgerEntries}
}

@skipClient
entity CostCenter {
	no String required
	name String required
    rank Integer required
}

relationship OneToMany {
	CostCenter{children} to CostCenter{parent}
	CostCenter{ledgerEntries1} to LedgerEntry{costCenter1}
    CostCenter{ledgerEntries2} to LedgerEntry{costCenter2}
    CostCenter{ledgerEntries3} to LedgerEntry{costCenter3}
}

@skipClient
entity Division {
	no String required
	name String required
}

relationship OneToMany {
	Division{ledgerEntries} to LedgerEntry{division}
}

@skipClient
entity CostType {
	no String required
	name String required
}

relationship OneToMany {
	CostType{ledgerEntries} to LedgerEntry{costType}
}

@skipClient
@search(elasticsearch)
@paginate(pagination)
entity Comment {
	contentHtml String required
    createdAt Instant required
}

relationship ManyToOne {
	Comment{author required} to User
}

@search(elasticsearch)
@paginate(pagination)
entity TagCustomType {
	name String required
    enabled Boolean required
}

@paginate(pagination)
entity TagCustomValue {
	value String required
}

relationship OneToMany {
	TagCustomType{values} to TagCustomValue{type required}
}

enum TagKind {
	TEXT
    CUSTOM
    PERSON
}

@paginate(pagination)
entity Tag {
	type TagKind required
    text String
}

relationship OneToMany {
    User to Tag{person}
	TagCustomType to Tag{customType}
    TagCustomValue to Tag{customValue}
}

enum HistoryAction {
	CREATE
    MODIFY
    DELETE
}

@readOnly
@skipClient
entity HistoryEntry {
	instant Instant required
    action HistoryAction required
    patch Blob
    recType String required
    recId Long required
    recId2 Long // For use with ManyToMany relations
}
paginate HistoryEntry with pagination

relationship OneToMany {
    User to HistoryEntry{author}
}

@readOnly
@skipClient
entity HistoryEntryField {
	type String required
    transKey String required
    oldValue String
    newValue String
}

relationship OneToMany {
	HistoryEntry{fields} to HistoryEntryField{entry required}
}
